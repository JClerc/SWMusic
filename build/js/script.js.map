{"version":3,"sources":["script.js","app.js","audio.js","canvas.polyfill.js","selector.js","episode1.js","hyperspace.js","navigation.js","selection.js","vote.js","main.js"],"names":["App","identifier","gotoUp","current","$","next","direction","Error","currentName","getAttribute","call","classList","remove","add","addEventListener","animationend","e","removeEventListener","setLocation","home","window","location","reload","isChangingHash","hash","setTimeout","gotoHash","homeFallback","length","substring","page","contains","HYPERSPACE","callbacks","state","i","bind","callback","push","AudioContext","webkitAudioContext","mozAudioContext","lastTime","vendors","x","requestAnimationFrame","cancelAnimationFrame","element","currTime","Date","getTime","timeToCall","Math","max","id","clearTimeout","document","querySelector","$$","querySelectorAll","episodeIsPlaying","canvas","getContext","width","innerWidth","height","innerHeight","audioContext","sourceNode","analyserNode","javascriptNode","amplitudeArray","frequencyArray","context","frequency","frequencyCount","audioData","audioPlaying","sampleSize","audioUrl","middleWidth","middleHeight","lastDraw","energyInterval","averageVolume","sinOffset","setupAudioNodes","createBufferSource","createAnalyser","createScriptProcessor","Uint8Array","frequencyBinCount","connect","destination","loadSound","url","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","playSound","onError","send","start","loop","console","warn","getAverageVolume","array","average","values","strokeStyle","shadowBlur","shadowColor","drawEnergy","drawSound","clearCanvas","k","value","frenquencyLength","frenquencyOffset","frequencyDraw","lineWidth","random","beginPath","moveTo","lineTo","sin","cos","stroke","clearRect","ex","now","getByteTimeDomainData","getByteFrequencyData","setInterval","clearInterval","stop","GLOBAL_SPEED","HYPERSPACE_RUN","interval","select","starsCount","stars","createStar","randomX","randomY","color","y","xs","ys","size","s","lineCap","begin","bindNavigation","this","preventDefault","elements","lastMove","leftOffset","screen","rightOffset","screenScale","selectCards","percentDivisor","toggleSelectionListener","event","percent","screenX","style","transform","buttons","bindVote","elt","innerHTML","log"],"mappings":"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","file":"script.js","sourcesContent":["'use strict';\n\n/**\n * Create App object\n *\n */\n\nvar App = {};\n\n(function () {\n\n    App.goto = function (identifier, gotoUp) {\n        var current = $('section.visible'),\n            next = $('.page.' + identifier),\n            direction = gotoUp ? 'up' : 'down';\n\n        if (!next || typeof gotoUp !== 'boolean') {\n            throw new Error('Wrong arguments: ' + next + ', ' + gotoUp);\n        } else if (current == next) {\n            throw new Error('Moving to the same page..');\n        } else {\n            if (current) {\n                var currentName = current.getAttribute('data-page');\n                App.call(currentName, 'unloading');\n                current.classList.remove('visible');\n                current.classList.add('exit-' + direction);\n                current.addEventListener('animationend', function animationend(e) {\n                    App.call(currentName, 'unloaded');\n                    current.removeEventListener('animationend', animationend);\n                    current.classList.remove('exit-' + direction);\n                });\n            }\n            App.call(identifier, 'loading');\n            next.classList.add('visible');\n            next.classList.add('enter-' + direction);\n            next.addEventListener('animationend', function animationend(e) {\n                App.call(identifier, 'loaded');\n                next.removeEventListener('animationend', animationend);\n                next.classList.remove('enter-' + direction);\n                App.setLocation(identifier);\n            });\n        }\n    };\n\n    App.home = function () {\n        // Rerun the page to restart the canvas\n        window.location.reload();\n    };\n\n    var isChangingHash = false;\n\n    App.setLocation = function (hash) {\n        isChangingHash = true;\n        window.location.hash = '#/' + hash;\n        setTimeout(function () {\n            isChangingHash = false;\n        }, 1);\n    };\n\n    App.gotoHash = function (homeFallback) {\n        if (isChangingHash) return;\n        if (window.location.hash && window.location.hash.length > 2) {\n            var hash = window.location.hash.substring(2),\n                page = $('.page.' + hash);\n\n            if (hash === 'home') {\n                App.home();\n                return;\n            } else if (page && page.classList.contains('page')) {\n                var current = $('section.visible');\n                if (current) {\n                    current.classList.remove('visible');\n                    var currentName = current.getAttribute('data-page');\n                    App.call(currentName, 'unloading');\n                    App.call(currentName, 'unloaded');\n                }\n                page.classList.add('visible');\n                App.call(hash, 'loading');\n                App.call(hash, 'loaded');\n                window.HYPERSPACE = false;\n                return;\n            }\n        }\n        if (homeFallback) {\n            App.home();\n        }\n    };\n\n    var callbacks = {};\n\n    App.call = function (page, state) {\n        if (callbacks[page] && callbacks[page][state]) {\n            for (var i = callbacks[page][state].length - 1; i >= 0; i--) {\n                callbacks[page][state][i]();\n            }\n        }\n    };\n\n    App.bind = function (page, state, callback) {\n        if (!callbacks[page]) {\n            callbacks[page] = {};\n        }\n        if (!callbacks[page][state]) {\n            callbacks[page][state] = [];\n        }\n        callbacks[page][state].push(callback);\n    };\n})();\n\"use strict\";\n\nwindow.AudioContext = (function () {\n    return window.AudioContext || window.webkitAudioContext || window.mozAudioContext;\n})();\n'use strict';\n\n/* Compatible avec tous les navigateurs */\n(function () {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {\n        var currTime = new Date().getTime();\n        var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n        var id = window.setTimeout(function () {\n            callback(currTime + timeToCall);\n        }, timeToCall);\n        lastTime = currTime + timeToCall;\n        return id;\n    };\n\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n        clearTimeout(id);\n    };\n})();\n\"use strict\";\n\nvar $ = document.querySelector.bind(document),\n    $$ = document.querySelectorAll.bind(document);\n'use strict';\n\n(function () {\n\n    var episodeIsPlaying = false;\n\n    var canvas = $('.episode-1 .drawing canvas');\n\n    if (!canvas || !canvas.getContext) return;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var context = canvas.getContext('2d'),\n        width = canvas.width,\n        height = canvas.height;\n\n    var frequency = 100,\n        amplitudeCount = 30,\n        frequencyCount = 40;\n\n    // Tutorial from: http://apprentice.craic.com/tutorials/30\n\n    var audioContext;\n    var audioBuffer;\n    var sourceNode;\n    var analyserNode;\n    var javascriptNode;\n    var audioData = null;\n    var audioPlaying = false;\n    var sampleSize = 1024;\n    var amplitudeArray;\n    var frequencyArray;\n    var audioUrl = 'audio/episode1.mp3';\n    var middleWidth = ~ ~(width / 2);\n    var middleHeight = ~ ~(height / 2);\n    var lastDraw = 0;\n    var energyInterval = -1;\n    var averageVolume = 0;\n    var sinOffset = 0;\n\n    var setupAudioNodes = function setupAudioNodes() {\n        sourceNode = audioContext.createBufferSource();\n        analyserNode = audioContext.createAnalyser();\n        javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n        // Create the array for the data values\n        amplitudeArray = new Uint8Array(analyserNode.frequencyBinCount);\n        frequencyArray = new Uint8Array(analyserNode.frequencyBinCount);\n        // Now connect the nodes together\n        sourceNode.connect(audioContext.destination);\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        javascriptNode.connect(audioContext.destination);\n    };\n\n    // Load the audio from the URL via Ajax and store it in global variable audioData\n    // Note that the audio load is asynchronous\n    var loadSound = function loadSound(url) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        // When loaded, decode the data and play the sound\n        request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n                audioData = buffer;\n                playSound(audioData);\n            }, onError);\n        };\n        request.send();\n    };\n\n    // Play the audio and loop until stopped\n    var playSound = function playSound(buffer) {\n        sourceNode.buffer = buffer;\n        // sourceNode.start();    // Play the sound now\n        sourceNode.start(0, 38);\n        sourceNode.loop = true;\n        audioPlaying = true;\n    };\n\n    var onError = function onError(e) {\n        console.warn(e);\n    };\n\n    var getAverageVolume = function getAverageVolume(array) {\n        var values = 0;\n        var average;\n\n        var length = array.length;\n\n        // get all the frequency amplitudes\n        for (var i = 0; i < length; i++) {\n            values += array[i];\n        }\n\n        average = values / length;\n        return average;\n    };\n\n    context.strokeStyle = 'white';\n    context.shadowBlur = 100;\n    context.shadowColor = 'rgb(220, 20, 220)';\n\n    var drawEnergy = function drawEnergy() {\n        // RANDOM ELECTRIC ARC\n\n        // clearCanvas();\n        // context.lineWidth = 3;\n\n        // var k, i, value = 0;\n        // var amplitudeLength = amplitudeArray.length;\n        // var amplitudeOffset = ~~(amplitudeLength / amplitudeCount);\n        // var amplitudeDraw = ~~(width / amplitudeCount);\n        // var size = 150;\n\n        // context.beginPath();\n        // context.moveTo(0, middleHeight);\n        // k = 0;\n        // for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n        //     k++;\n        //     context.lineTo(k * amplitudeDraw, (Math.random() * size - size/2) * averageVolume + middleHeight);\n\n        // }\n        // context.lineTo(width, middleHeight);\n        // context.stroke();\n\n    };\n\n    var drawSound = function drawSound() {\n        if (episodeIsPlaying) {\n            clearCanvas();\n\n            var k,\n                i,\n                value = 0;\n\n            // FREQUENCY VARIABLE\n\n            var frenquencyLength = frequencyArray.length - 300;\n            var frenquencyOffset = ~ ~(frenquencyLength / frequencyCount);\n            var frequencyDraw = ~ ~(middleWidth / frequencyCount);\n\n            // DOUBLE FREQUENCY ARC - SYMMETRIC\n\n            context.lineWidth = ~ ~(3 + Math.random() * 6);\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n\n            k = 0;\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                context.lineTo(k * frequencyDraw, height - middleHeight - value * middleHeight * Math.sin(sinOffset + k / 5));\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2; i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - value * middleHeight * Math.cos(sinOffset + k / 5));\n            }\n\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n            sinOffset -= 0.9;\n\n            // episodeIsPlaying = false;\n\n            // context.lineWidth = ~~(2 + Math.random() * 4);\n\n            // var amplitudeLength = amplitudeArray.length;\n            // var amplitudeOffset = ~~(amplitudeLength / amplitudeCount);\n            // var amplitudeDraw = ~~(width / amplitudeCount);\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n            //     k++;\n            //     value = height - (height * amplitudeArray[i] / 256) - 1;\n            //     context.lineTo(k * amplitudeDraw, value);\n\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n            //     k++;\n            //     value = height - (height * amplitudeArray[i] / 256) - 1;\n            //     context.lineTo(k * amplitudeDraw, value);\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n            //     k++;\n            //     context.lineTo(k * amplitudeDraw, Math.random() * 50 - 25 + middleHeight);\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n        }\n    };\n\n    var clearCanvas = function clearCanvas() {\n        context.clearRect(0, 0, width, height);\n    };\n\n    try {\n        audioContext = new AudioContext();\n    } catch (ex) {\n        console.warn('Web Audio API is not supported in this browser');\n    }\n\n    App.bind('episode-1', 'loaded', function (e) {\n        episodeIsPlaying = true;\n\n        setupAudioNodes();\n\n        // setup the event handler that is triggered every time enough samples have been collected\n        // trigger the audio analysis and draw the results\n        javascriptNode.addEventListener('audioprocess', function (e) {\n            var now = new Date().getTime();\n            if (lastDraw > now - frequency) return;\n            lastDraw = now;\n            // get the Time Domain data for this sample\n            averageVolume = getAverageVolume(frequencyArray) / 100;\n            analyserNode.getByteTimeDomainData(amplitudeArray);\n            analyserNode.getByteFrequencyData(frequencyArray);\n\n            // draw the display if the audio is playing\n            if (audioPlaying === true) {\n                window.requestAnimationFrame(drawSound);\n            }\n        });\n\n        // Load the Audio the first time through, otherwise play it from the buffer\n        if (audioData === null) {\n            loadSound(audioUrl);\n        } else {\n            playSound(audioData);\n        }\n\n        energyInterval = setInterval(drawEnergy, 62);\n    });\n\n    App.bind('episode-1', 'unloading', function () {\n        clearInterval(energyInterval);\n        episodeIsPlaying = false;\n        sourceNode.stop(0);\n        clearCanvas();\n        audioPlaying = false;\n    });\n})();\n'use strict';\n\n(function () {\n\n    var GLOBAL_SPEED = 0.1,\n        HYPERSPACE_RUN = true;\n\n    App.bind('home', 'unloading', function () {\n        var interval = setInterval(function () {\n            GLOBAL_SPEED = (GLOBAL_SPEED + 0.1) * 1.3;\n            if (GLOBAL_SPEED > 70) {\n                clearInterval(interval);\n            }\n        }, 100);\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        // select.addEventListener('animationend', function begin(e) {\n        //     select.removeEventListener('animationend', begin);\n        // });\n\n        home.classList.add('exit-hyperspace');\n        select.classList.add('enter-hyperspace');\n    });\n\n    App.bind('home', 'unloaded', function () {\n        HYPERSPACE_RUN = false;\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        home.classList.remove('visible');\n        home.classList.remove('exit-hyperspace');\n        select.classList.remove('enter-hyperspace');\n    });\n\n    (function (canvas) {\n\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        if (canvas.getContext) {\n            var context = canvas.getContext('2d'),\n                width = canvas.width,\n                height = canvas.height,\n                starsCount = 100,\n                centerRadius = 100,\n                length = 10,\n                stars = [];\n\n            var createStar = function createStar() {\n                var randomX = Math.random(),\n                    randomY = Math.random(),\n                    color = ~ ~(Math.random() * 80 + 20);\n\n                return {\n                    x: randomX * width,\n                    y: randomY * height,\n                    xs: (randomX * width - width / 2) / 500,\n                    ys: (randomY * height - height / 2) / 500,\n                    size: ~ ~(color / 20),\n                    length: Math.random() * length,\n                    color: 'rgb(' + color + ', ' + color + ', ' + ~ ~(color + Math.random() * 20) + ')'\n                };\n            };\n\n            for (var i = 0; i < starsCount; i++) {\n                stars.push(createStar());\n            }\n\n            (function loop() {\n                if (HYPERSPACE_RUN) {\n\n                    window.requestAnimationFrame(loop);\n                    context.clearRect(0, 0, width, height);\n\n                    for (var i = 0; i < starsCount; i++) {\n                        var s = stars[i];\n                        if (s.x < 0 || s.y < 0 || s.x > width || s.y > height) {\n                            s = stars[i] = createStar();\n                        }\n                        context.strokeStyle = s.color;\n                        context.lineWidth = s.size;\n                        context.shadowBlur = 5;\n                        context.lineCap = 'round';\n                        context.shadowColor = \"#555\";\n                        context.beginPath();\n                        context.moveTo(s.x, s.y);\n                        context.lineTo(s.x + 0.1 + s.length * s.xs * GLOBAL_SPEED, s.y + s.length * s.ys * GLOBAL_SPEED);\n                        context.stroke();\n                        s.x += s.xs * GLOBAL_SPEED;\n                        s.y += s.ys * GLOBAL_SPEED;\n                    }\n                }\n            })();\n        }\n    })($('.hyperspace'));\n})();\n'use strict';\n\n/**\n * Navigation between pages\n *\n */\n\n// Bind begin button to hyperspace animation\n$('.begin').addEventListener('click', function (e) {\n    App.call('home', 'unloading');\n    App.call('select', 'loading');\n    var select = $('.page.select');\n    select.addEventListener('animationend', function begin(e) {\n        select.removeEventListener('animationend', begin);\n        App.call('home', 'unloaded');\n        App.call('select', 'loaded');\n        $('.page.select').classList.add('visible');\n        App.setLocation('select');\n    });\n});\n\n// Bind navigation elements to animations\nvar bindNavigation = function bindNavigation(element) {\n    element.addEventListener('click', function (e) {\n        App.goto(this.getAttribute('data-target'), this.getAttribute('data-direction') === 'up');\n        e.preventDefault();\n    });\n};\n\nvar elements = $$('.navigation');\nfor (var i = elements.length - 1; i >= 0; i--) {\n    bindNavigation(elements[i]);\n}\n\n// Change page if hash change\nwindow.addEventListener('hashchange', App.gotoHash);\n\n// If a hash is already set\nApp.gotoHash(false);\n'use strict';\n\n(function () {\n\n    var select = {\n        lastMove: 0,\n        leftOffset: window.screen.width / 2 - 100,\n        rightOffset: 0,\n        screenScale: 100 - 100 / 1.75,\n        selectCards: $('.select .cards')\n    };\n\n    select.percentDivisor = window.screen.width - select.rightOffset - select.leftOffset;\n\n    var toggleSelectionListener = function toggleSelectionListener(event) {\n        var now = new Date().getTime();\n        if (select.lastMove < now - 20) {\n\n            select.lastMove = now;\n            var percent = (event.screenX - select.leftOffset) / select.percentDivisor;\n\n            if (percent < 0) {\n                percent = 0;\n            } else if (percent > 1) {\n                percent = 1;\n            }\n\n            select.selectCards.style.transform = 'translateZ(0) translateX(-' + percent * select.screenScale + '%)';\n        }\n    };\n\n    App.bind('select', 'loading', function () {\n        document.addEventListener('mousemove', toggleSelectionListener);\n    });\n\n    App.bind('select', 'unloading', function () {\n        document.removeEventListener('mousemove', toggleSelectionListener);\n    });\n})();\n'use strict';\n\n(function () {\n\n    var buttons = $$('.button-vote');\n    var bindVote = function bindVote(elt) {\n        elt.addEventListener('click', function (e) {\n            for (var i = buttons.length - 1; i >= 0; i--) {\n                buttons[i].innerHTML = \"Je vote\";\n            }\n            elt.innerHTML = \"Vote validé !\";\n        });\n    };\n\n    for (var i = buttons.length - 1; i >= 0; i--) {\n        bindVote(buttons[i]);\n    }\n})();\n'use strict';\n\nconsole.log('Libs and App loaded !');","/**\n * Create App object\n *\n */\n\nvar App = {};\n\n(function () {\n\n    App.goto = function (identifier, gotoUp) {\n        var current = $('section.visible'),\n            next = $('.page.' + identifier),\n            direction = gotoUp ? 'up' : 'down';\n\n        if (!next || typeof gotoUp !== 'boolean') {\n            throw new Error('Wrong arguments: ' + next + ', ' + gotoUp);\n        } else if (current == next) {\n            throw new Error('Moving to the same page..');\n        } else {\n            if (current) {\n                var currentName = current.getAttribute('data-page');\n                App.call(currentName, 'unloading');\n                current.classList.remove('visible');\n                current.classList.add('exit-' + direction);\n                current.addEventListener('animationend', function animationend(e) {\n                    App.call(currentName, 'unloaded');\n                    current.removeEventListener('animationend', animationend);\n                    current.classList.remove('exit-' + direction);\n                });\n            }\n            App.call(identifier, 'loading');\n            next.classList.add('visible');\n            next.classList.add('enter-' + direction);\n            next.addEventListener('animationend', function animationend(e) {\n                App.call(identifier, 'loaded');\n                next.removeEventListener('animationend', animationend);\n                next.classList.remove('enter-' + direction);\n                App.setLocation(identifier);\n            });\n        }\n    };\n\n    App.home = function () {\n        // Rerun the page to restart the canvas\n        window.location.reload();\n    };\n\n    var isChangingHash = false;\n\n    App.setLocation = function (hash) {\n        isChangingHash = true;\n        window.location.hash = '#/' + hash;\n        setTimeout(function () {\n            isChangingHash = false;\n        }, 1);\n    };\n\n    App.gotoHash = function (homeFallback) {\n        if (isChangingHash) return;\n        if (window.location.hash && window.location.hash.length > 2) {\n            var hash = window.location.hash.substring(2),\n                page = $('.page.' + hash);\n\n            if (hash === 'home') {\n                App.home();\n                return;\n            } else if (page && page.classList.contains('page')) {\n                var current = $('section.visible');\n                if (current) {\n                    current.classList.remove('visible');\n                    var currentName = current.getAttribute('data-page');\n                    App.call(currentName, 'unloading');\n                    App.call(currentName, 'unloaded');\n                }\n                page.classList.add('visible');\n                App.call(hash, 'loading');\n                App.call(hash, 'loaded');\n                window.HYPERSPACE = false;\n                return;\n            }\n        }\n        if (homeFallback) {\n            App.home();\n        }\n    };\n\n    var callbacks = {};\n    \n    App.call = function (page, state) {\n        if (callbacks[page] && callbacks[page][state]) {\n            for (var i = callbacks[page][state].length - 1; i >= 0; i--) {\n                callbacks[page][state][i]();\n            }\n        }\n    };\n\n    App.bind = function (page, state, callback) {\n        if (!callbacks[page]) {\n            callbacks[page] = {};\n        }\n        if (!callbacks[page][state]) {\n            callbacks[page][state] = [];\n        }\n        callbacks[page][state].push(callback);\n    };\n\n})();\n\n","\nwindow.AudioContext = (function() {\n    return  window.AudioContext || window.webkitAudioContext || window.mozAudioContext;\n})();\n","/* Compatible avec tous les navigateurs */\n(function() {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n        window.cancelAnimationFrame =\n          window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n\n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n}());\n","\nvar $ = document.querySelector.bind(document),\n    $$ = document.querySelectorAll.bind(document);\n","\n(function () {\n\n    var episodeIsPlaying = false;\n\n    var canvas = $('.episode-1 .drawing canvas');\n\n    if (!canvas || !canvas.getContext) return;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var context = canvas.getContext('2d'),\n        width = canvas.width,\n        height = canvas.height;\n\n    var frequency = 100,\n        amplitudeCount = 30,\n        frequencyCount = 40;\n\n    // Tutorial from: http://apprentice.craic.com/tutorials/30\n\n    var audioContext;\n    var audioBuffer;\n    var sourceNode;\n    var analyserNode;\n    var javascriptNode;\n    var audioData = null;\n    var audioPlaying = false;\n    var sampleSize = 1024;\n    var amplitudeArray;\n    var frequencyArray;\n    var audioUrl = 'audio/episode1.mp3';\n    var middleWidth = ~~(width / 2);\n    var middleHeight = ~~(height / 2);\n    var lastDraw = 0;\n    var energyInterval = -1;\n    var averageVolume = 0;\n    var sinOffset = 0;\n\n    var setupAudioNodes = function () {\n        sourceNode     = audioContext.createBufferSource();\n        analyserNode   = audioContext.createAnalyser();\n        javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n        // Create the array for the data values\n        amplitudeArray = new Uint8Array(analyserNode.frequencyBinCount);\n        frequencyArray = new Uint8Array(analyserNode.frequencyBinCount);\n        // Now connect the nodes together\n        sourceNode.connect(audioContext.destination);\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        javascriptNode.connect(audioContext.destination);\n    };\n\n    // Load the audio from the URL via Ajax and store it in global variable audioData\n    // Note that the audio load is asynchronous\n    var loadSound = function (url) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        // When loaded, decode the data and play the sound\n        request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n                audioData = buffer;\n                playSound(audioData);\n            }, onError);\n        };\n        request.send();\n    };\n\n    // Play the audio and loop until stopped\n    var playSound = function (buffer) {\n        sourceNode.buffer = buffer;\n        // sourceNode.start();    // Play the sound now\n        sourceNode.start(0, 38);\n        sourceNode.loop = true;\n        audioPlaying = true;\n    };\n\n    var onError = function (e) {\n        console.warn(e);\n    };\n\n    var getAverageVolume = function (array) {\n        var values = 0;\n        var average;\n \n        var length = array.length;\n \n        // get all the frequency amplitudes\n        for (var i = 0; i < length; i++) {\n            values += array[i];\n        }\n \n        average = values / length;\n        return average;\n    };\n\n    context.strokeStyle = 'white';\n    context.shadowBlur = 100;\n    context.shadowColor = 'rgb(220, 20, 220)';\n\n    var drawEnergy = function () {\n        // RANDOM ELECTRIC ARC\n\n        // clearCanvas();\n        // context.lineWidth = 3;\n\n        // var k, i, value = 0;\n        // var amplitudeLength = amplitudeArray.length;\n        // var amplitudeOffset = ~~(amplitudeLength / amplitudeCount);\n        // var amplitudeDraw = ~~(width / amplitudeCount);\n        // var size = 150;\n\n        // context.beginPath();\n        // context.moveTo(0, middleHeight);\n        // k = 0;\n        // for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n        //     k++;\n        //     context.lineTo(k * amplitudeDraw, (Math.random() * size - size/2) * averageVolume + middleHeight);\n\n        // }\n        // context.lineTo(width, middleHeight);\n        // context.stroke();\n\n    };\n\n    var drawSound = function () {\n        if (episodeIsPlaying) {\n            clearCanvas();\n\n            var k, i, value = 0;\n\n            // FREQUENCY VARIABLE\n\n            var frenquencyLength = frequencyArray.length - 300;\n            var frenquencyOffset = ~~(frenquencyLength / frequencyCount);\n            var frequencyDraw = ~~(middleWidth / frequencyCount);\n\n            // DOUBLE FREQUENCY ARC - SYMMETRIC\n\n            context.lineWidth = ~~(3 + Math.random() * 6);\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n\n            k = 0;\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                context.lineTo(k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.sin(sinOffset + k / 5));\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2; i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.cos(sinOffset + k / 5));\n            }\n\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n            sinOffset -= 0.9;\n\n            // episodeIsPlaying = false;\n\n\n            // context.lineWidth = ~~(2 + Math.random() * 4);\n\n            // var amplitudeLength = amplitudeArray.length;\n            // var amplitudeOffset = ~~(amplitudeLength / amplitudeCount);\n            // var amplitudeDraw = ~~(width / amplitudeCount);\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n            //     k++;\n            //     value = height - (height * amplitudeArray[i] / 256) - 1;\n            //     context.lineTo(k * amplitudeDraw, value);\n\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n            //     k++;\n            //     value = height - (height * amplitudeArray[i] / 256) - 1;\n            //     context.lineTo(k * amplitudeDraw, value);\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n            //     k++;\n            //     context.lineTo(k * amplitudeDraw, Math.random() * 50 - 25 + middleHeight);\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n        }\n    };\n\n    var clearCanvas = function () {\n        context.clearRect(0, 0, width, height);\n    };\n\n    try {\n        audioContext = new AudioContext();\n    } catch (ex) {\n        console.warn('Web Audio API is not supported in this browser');\n    }\n\n\n    App.bind('episode-1', 'loaded', function (e) {\n        episodeIsPlaying = true;\n\n        setupAudioNodes();\n\n        // setup the event handler that is triggered every time enough samples have been collected\n        // trigger the audio analysis and draw the results\n        javascriptNode.addEventListener('audioprocess', function (e) {\n            var now = new Date().getTime();\n            if (lastDraw > now - frequency) return;\n            lastDraw = now;\n            // get the Time Domain data for this sample\n            averageVolume = getAverageVolume(frequencyArray) / 100;\n            analyserNode.getByteTimeDomainData(amplitudeArray);\n            analyserNode.getByteFrequencyData(frequencyArray);\n\n            // draw the display if the audio is playing\n            if (audioPlaying === true) {\n                window.requestAnimationFrame(drawSound);\n            }\n        });\n\n        // Load the Audio the first time through, otherwise play it from the buffer\n        if (audioData === null) {\n            loadSound(audioUrl);\n        } else {\n            playSound(audioData);\n        }\n\n        energyInterval = setInterval(drawEnergy, 62);\n\n    });\n\n    App.bind('episode-1', 'unloading', function () {\n        clearInterval(energyInterval);\n        episodeIsPlaying = false;\n        sourceNode.stop(0);\n        clearCanvas();\n        audioPlaying = false;\n    });\n\n})();\n","\n(function () {\n\n    var GLOBAL_SPEED = 0.1,\n        HYPERSPACE_RUN = true;\n\n    App.bind('home', 'unloading', function () {\n        var interval = setInterval(function () {\n            GLOBAL_SPEED = (GLOBAL_SPEED + 0.1) * 1.3;\n            if (GLOBAL_SPEED > 70) {\n                clearInterval(interval);\n            }\n        }, 100);\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        // select.addEventListener('animationend', function begin(e) { \n        //     select.removeEventListener('animationend', begin);\n        // });\n\n        home.classList.add('exit-hyperspace');\n        select.classList.add('enter-hyperspace');\n    });\n\n    App.bind('home', 'unloaded', function () {\n        HYPERSPACE_RUN = false;\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        home.classList.remove('visible');\n        home.classList.remove('exit-hyperspace');\n        select.classList.remove('enter-hyperspace');\n    });\n\n    (function (canvas) {\n\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        if (canvas.getContext) {\n            var context = canvas.getContext('2d'),\n                width = canvas.width,\n                height = canvas.height,\n                starsCount = 100,\n                centerRadius = 100,\n                length = 10,\n                stars = [];\n\n            var createStar = function () {\n                var randomX = Math.random(),\n                    randomY = Math.random(),\n                    color = ~~(Math.random() * 80 + 20);\n\n                return {\n                    x: randomX * width,\n                    y: randomY * height,\n                    xs: (randomX * width - width/2) / 500,\n                    ys: (randomY * height - height/2) / 500,\n                    size: ~~(color / 20),\n                    length: Math.random() * length,\n                    color: 'rgb(' + color + ', ' + color + ', ' + ~~(color + Math.random() * 20) + ')'\n                };\n            };\n\n            for (var i = 0; i < starsCount; i++) {\n                stars.push(createStar());\n            }\n\n            (function loop() {\n                if (HYPERSPACE_RUN) {\n\n                    window.requestAnimationFrame(loop);\n                    context.clearRect(0, 0, width, height);\n\n                    for (var i = 0; i < starsCount; i++) {\n                        var s = stars[i];\n                        if (s.x < 0 || s.y < 0 || s.x > width || s.y > height) {\n                            s = stars[i] = createStar();\n                        }\n                        context.strokeStyle = s.color;\n                        context.lineWidth = s.size;\n                        context.shadowBlur = 5;\n                        context.lineCap = 'round';\n                        context.shadowColor = \"#555\";\n                        context.beginPath();\n                        context.moveTo(s.x, s.y);\n                        context.lineTo(s.x + 0.1 + s.length * s.xs * GLOBAL_SPEED, s.y + s.length * s.ys * GLOBAL_SPEED);\n                        context.stroke();\n                        s.x += s.xs * GLOBAL_SPEED;\n                        s.y += s.ys * GLOBAL_SPEED;\n                    }\n                }\n            })();\n        }\n\n    })($('.hyperspace'));\n\n})();","/**\n * Navigation between pages\n *\n */\n\n// Bind begin button to hyperspace animation\n$('.begin').addEventListener('click', function (e) {\n    App.call('home', 'unloading');\n    App.call('select', 'loading');\n    var select = $('.page.select');\n    select.addEventListener('animationend', function begin(e) { \n        select.removeEventListener('animationend', begin);\n        App.call('home', 'unloaded');\n        App.call('select', 'loaded');\n        $('.page.select').classList.add('visible');\n        App.setLocation('select');\n    });\n});\n\n// Bind navigation elements to animations\nvar bindNavigation = function (element) {\n    element.addEventListener('click', function (e) {\n        App.goto(this.getAttribute('data-target'), this.getAttribute('data-direction') === 'up');\n        e.preventDefault();\n    });\n};\n\nvar elements = $$('.navigation');\nfor (var i = elements.length - 1; i >= 0; i--) {\n    bindNavigation(elements[i]);\n}\n\n// Change page if hash change\nwindow.addEventListener('hashchange', App.gotoHash);\n\n// If a hash is already set\nApp.gotoHash(false);\n","\n(function () {\n\n    var select = {\n        lastMove: 0,\n        leftOffset: window.screen.width / 2 - 100,\n        rightOffset: 0,\n        screenScale: (100 - 100 / 1.75),\n        selectCards: $('.select .cards')\n    };\n\n    select.percentDivisor = window.screen.width - select.rightOffset - select.leftOffset;\n\n    var toggleSelectionListener = function(event) {\n        var now = new Date().getTime();\n        if (select.lastMove < now - 20) {\n\n            select.lastMove = now;\n            var percent = (event.screenX - select.leftOffset) / select.percentDivisor;\n            \n            if (percent < 0) {\n                percent = 0;\n            } else if (percent > 1) {\n                percent = 1;\n            }\n\n            select.selectCards.style.transform = 'translateZ(0) translateX(-' + percent * select.screenScale + '%)';\n        }\n    };\n\n    App.bind('select', 'loading', function () {\n        document.addEventListener('mousemove', toggleSelectionListener);\n    });\n\n    App.bind('select', 'unloading', function () {\n        document.removeEventListener('mousemove', toggleSelectionListener);\n    });\n\n})();\n","\n(function () {\n\n    var buttons = $$('.button-vote');\n    var bindVote = function (elt) {\n        elt.addEventListener('click', function (e) {\n            for (var i = buttons.length - 1; i >= 0; i--) {\n                buttons[i].innerHTML = \"Je vote\";\n            }\n            elt.innerHTML = \"Vote validé !\";\n        });\n    };\n\n    for (var i = buttons.length - 1; i >= 0; i--) {\n        bindVote(buttons[i]);\n    }\n\n})();\n","\nconsole.log('Libs and App loaded !');\n"],"sourceRoot":"/source/"}