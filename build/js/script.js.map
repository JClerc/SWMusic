{"version":3,"sources":["script.js","ambientlight.js","app.js","audio.polyfill.js","canvas.polyfill.js","episode1.js","episode2.js","hyperspace.js","loader.js","navigation.js","selection.js","vote.js","main.js"],"names":["AmbientLight","video","ambient","this","light1","querySelector","light2","interval","App","$","document","bind","$$","querySelectorAll","identifier","gotoUp","current","next","direction","Error","currentName","getAttribute","call","classList","remove","add","addEventListener","animationend","e","removeEventListener","setLocation","home","window","location","href","substring","indexOf","reload","isChangingHash","hash","setTimeout","gotoHash","homeFallback","length","page","contains","HYPERSPACE","callbacks","state","i","callback","push","AudioContext","webkitAudioContext","mozAudioContext","lastTime","vendors","x","requestAnimationFrame","cancelAnimationFrame","element","currTime","Date","getTime","timeToCall","Math","max","id","clearTimeout","prototype","play","self","setInterval","applyTo","children","canvas","createElement","getContext","width","height","appendChild","drawImage","toggle","stop","clearInterval","episodeIsPlaying","ambientLight","innerWidth","innerHeight","audioContext","sourceNode","analyserNode","javascriptNode","amplitudeArray","frequencyArray","context","frequency","frequencyCount","audioData","audioPlaying","sampleSize","audioUrl","middleWidth","middleHeight","lastDraw","energyInterval","averageVolume","sinOffset","PI","setupAudioNodes","createBufferSource","createAnalyser","createScriptProcessor","Uint8Array","frequencyBinCount","connect","destination","loadSound","url","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","buffer","playSound","onError","send","start","loop","console","warn","getAverageVolume","array","average","values","strokeStyle","shadowBlur","shadowColor","drawEnergy","drawSound","clearCanvas","k","value","frenquencyLength","frenquencyOffset","frequencyDraw","lineWidth","random","beginPath","moveTo","lineTo","sin","cos","stroke","clearRect","ex","currentTime","now","getByteTimeDomainData","getByteFrequencyData","pause","canvasEnergy","energyCtx","energyWidth","energyHeight","particles","render","circles","initialized","init","config","count","circleMaxWidth","circlesEl","getElementById","node","style","renderFrame","frequencyData","color_gradient","increment_value","opacity","opacity_value","circle","cssText","backgroundColor","isInitialized","create_particle","particle","y","speed","radius","draw","fillStyle","arc","fill","drawing","GLOBAL_SPEED","HYPERSPACE_RUN","select","starsCount","stars","createStar","randomX","randomY","color","xs","ys","size","s","lineCap","preloadImages","urls","img","Image","src","loader","begin","bindNavigation","preventDefault","elements","lastMove","leftOffset","screen","rightOffset","screenScale","selectCards","percentDivisor","selectionListener","event","percent","screenX","transform","buttons","bindVote","elt","innerHTML"],"mappings":"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","file":"script.js","sourcesContent":["'use strict';\n\n/**\n * Create App object\n *\n */\n\nvar App = {},\n    $ = document.querySelector.bind(document),\n    $$ = document.querySelectorAll.bind(document);\n\n(function () {\n\n    App.goto = function (identifier, gotoUp) {\n        var current = $('section.visible'),\n            next = $('.page.' + identifier),\n            direction = gotoUp ? 'up' : 'down';\n\n        if (!next || typeof gotoUp !== 'boolean') {\n            throw new Error('Wrong arguments: ' + next + ', ' + gotoUp);\n        } else if (current == next) {\n            throw new Error('Moving to the same page..');\n        } else {\n            if (current) {\n                var currentName = current.getAttribute('data-page');\n                App.call(currentName, 'unloading');\n                current.classList.remove('visible');\n                current.classList.add('exit-' + direction);\n                current.addEventListener('animationend', function animationend(e) {\n                    App.call(currentName, 'unloaded');\n                    current.removeEventListener('animationend', animationend);\n                    current.classList.remove('exit-' + direction);\n                });\n            }\n            App.call(identifier, 'loading');\n            next.classList.add('visible');\n            next.classList.add('enter-' + direction);\n            next.addEventListener('animationend', function animationend(e) {\n                App.call(identifier, 'loaded');\n                next.removeEventListener('animationend', animationend);\n                next.classList.remove('enter-' + direction);\n                if (identifier !== 'home') {\n                    App.setLocation(identifier);\n                }\n            });\n        }\n    };\n\n    App.home = function () {\n        // Rerun the page to restart the canvas\n        if (window.location.href) {\n            window.location.href = window.location.href.substring(0, window.location.href.indexOf('#') - 1);\n        } else {\n            window.location.reload();\n        }\n    };\n\n    var isChangingHash = false;\n\n    App.setLocation = function (hash) {\n        isChangingHash = true;\n        window.location.hash = '#/' + hash;\n        setTimeout(function () {\n            isChangingHash = false;\n        }, 1);\n    };\n\n    App.gotoHash = function (homeFallback) {\n        if (isChangingHash) return;\n        if (window.location.hash && window.location.hash.length > 2) {\n            var hash = window.location.hash.substring(2),\n                page = $('.page.' + hash);\n\n            if (hash === 'home') {\n                App.home();\n                return;\n            } else if (page && page.classList.contains('page')) {\n                var current = $('section.visible');\n                if (current) {\n                    current.classList.remove('visible');\n                    var currentName = current.getAttribute('data-page');\n                    App.call(currentName, 'unloading');\n                    App.call(currentName, 'unloaded');\n                }\n                page.classList.add('visible');\n                App.call(hash, 'loading');\n                App.call(hash, 'loaded');\n                window.HYPERSPACE = false;\n                return;\n            }\n        }\n        if (homeFallback) {\n            App.home();\n        }\n    };\n\n    var callbacks = {};\n\n    App.call = function (page, state) {\n        if (callbacks[page] && callbacks[page][state]) {\n            for (var i = callbacks[page][state].length - 1; i >= 0; i--) {\n                callbacks[page][state][i]();\n            }\n        }\n    };\n\n    App.bind = function (page, state, callback) {\n        if (!callbacks[page]) {\n            callbacks[page] = {};\n        }\n        if (!callbacks[page][state]) {\n            callbacks[page][state] = [];\n        }\n        callbacks[page][state].push(callback);\n    };\n})();\n\"use strict\";\n\nwindow.AudioContext = (function () {\n    return window.AudioContext || window.webkitAudioContext || window.mozAudioContext;\n})();\n'use strict';\n\n/* Compatible avec tous les navigateurs */\n(function () {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {\n        var currTime = new Date().getTime();\n        var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n        var id = window.setTimeout(function () {\n            callback(currTime + timeToCall);\n        }, timeToCall);\n        lastTime = currTime + timeToCall;\n        return id;\n    };\n\n    if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {\n        clearTimeout(id);\n    };\n})();\n'use strict';\n\nfunction AmbientLight(video, ambient) {\n    this.video = video;\n    this.ambient = ambient;\n    this.light1 = ambient.querySelector('.light-1');\n    this.light2 = ambient.querySelector('.light-2');\n    this.interval = -1;\n}\n\nAmbientLight.prototype.play = function () {\n    this.ambient.classList.add('active');\n    var self = this;\n\n    this.interval = setInterval(function () {\n\n        var applyTo = self.light1.classList.contains('active') ? self.light2 : self.light1;\n\n        // We show a 1x1 canvas in 100% width/height\n\n        if (!applyTo.children[0]) {\n            // If canvas doesn't exist, we create it\n            var canvas = document.createElement('canvas'),\n                context = canvas.getContext('2d');\n\n            canvas.width = 1;\n            canvas.height = 1;\n            canvas.classList.add('background');\n\n            applyTo.appendChild(canvas);\n        }\n\n        applyTo.children[0].getContext('2d').drawImage(self.video, 0, 0, 1, 1);\n\n        // As we can't do transition on gradient, we use 2 layers\n        // And we apply gradient to one, and do a transition on opacity\n        // Then next time we apply gradient to other one, etc...\n        self.light1.classList.toggle('active');\n        self.light2.classList.toggle('active');\n    }, 1000);\n};\n\nAmbientLight.prototype.stop = function () {\n    this.ambient.classList.remove('active');\n    clearInterval(this.interval);\n};\n'use strict';\n\n(function () {\n\n    var episodeIsPlaying = false;\n\n    var canvas = $('.episode-1 .drawing canvas');\n    var video = $('.episode-1 .video');\n    var ambientLight = new AmbientLight(video, $('.episode-1 .ambient'));\n\n    if (!canvas || !canvas.getContext) return;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var context = canvas.getContext('2d'),\n        width = canvas.width,\n        height = canvas.height;\n\n    var frequency = 30,\n        amplitudeCount = 30,\n        frequencyCount = 40;\n\n    // Tutorial from: http://apprentice.craic.com/tutorials/30\n\n    var audioContext;\n    var audioBuffer;\n    var sourceNode;\n    var analyserNode;\n    var javascriptNode;\n    var audioData = null;\n    var audioPlaying = false;\n    var sampleSize = 1024;\n    var amplitudeArray;\n    var frequencyArray;\n    var audioUrl = 'media/episode1.mp3';\n    var middleWidth = ~ ~(width / 2);\n    var middleHeight = ~ ~(height / 2);\n    var lastDraw = 0;\n    var energyInterval = -1;\n    var averageVolume = 0;\n    var sinOffset = Math.PI / 2;\n\n    var setupAudioNodes = function setupAudioNodes() {\n        sourceNode = audioContext.createBufferSource();\n        analyserNode = audioContext.createAnalyser();\n        javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n\n        // Create the array for the data values\n        amplitudeArray = new Uint8Array(analyserNode.frequencyBinCount);\n        frequencyArray = new Uint8Array(analyserNode.frequencyBinCount);\n        // Now connect the nodes together\n        sourceNode.connect(audioContext.destination);\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        javascriptNode.connect(audioContext.destination);\n    };\n\n    // Load the audio from the URL via Ajax and store it in global variable audioData\n    // Note that the audio load is asynchronous\n    var loadSound = function loadSound(url) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        // When loaded, decode the data and play the sound\n        request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n                audioData = buffer;\n                playSound(audioData);\n            }, onError);\n        };\n        request.send();\n    };\n\n    // Play the audio and loop until stopped\n    var playSound = function playSound(buffer) {\n        sourceNode.buffer = buffer;\n        // sourceNode.start();    // Play the sound now\n        sourceNode.start(0);\n        sourceNode.loop = true;\n        audioPlaying = true;\n    };\n\n    var onError = function onError(e) {\n        console.warn(e);\n    };\n\n    var getAverageVolume = function getAverageVolume(array) {\n        var values = 0;\n        var average;\n\n        var length = array.length;\n\n        // get all the frequency amplitudes\n        for (var i = 0; i < length; i++) {\n            values += array[i];\n        }\n\n        average = values / length;\n        return average;\n    };\n\n    context.strokeStyle = 'white';\n    context.shadowBlur = 100;\n    context.shadowColor = 'rgb(220, 20, 220)';\n\n    var drawEnergy = function drawEnergy() {\n        return;\n        // RANDOM ELECTRIC ARC\n\n        // clearCanvas();\n        context.lineWidth = 3;\n\n        var k,\n            i,\n            value = 0;\n        var amplitudeLength = amplitudeArray.length;\n        var amplitudeOffset = ~ ~(amplitudeLength / amplitudeCount);\n        var amplitudeDraw = ~ ~(width / amplitudeCount);\n        var size = 150;\n\n        context.beginPath();\n        context.moveTo(0, middleHeight);\n        k = 0;\n        for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n            k++;\n            context.lineTo(k * amplitudeDraw, (Math.random() * size - size / 2) * averageVolume + middleHeight);\n        }\n        context.lineTo(width, middleHeight);\n        context.stroke();\n    };\n\n    var drawSound = function drawSound() {\n        if (episodeIsPlaying) {\n            clearCanvas();\n\n            var k,\n                i,\n                value = 0;\n\n            // FREQUENCY VARIABLE\n\n            var frenquencyLength = frequencyArray.length - 300;\n            var frenquencyOffset = ~ ~(frenquencyLength / frequencyCount);\n            var frequencyDraw = ~ ~(middleWidth / frequencyCount);\n\n            // DOUBLE FREQUENCY ARC - SYMMETRIC\n\n            context.lineWidth = ~ ~(3 + Math.random() * 6);\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n\n            k = 0;\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                // context.lineTo(k * frequencyDraw, height - middleHeight - (value * middleHeight));\n                // context.lineTo(k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.sin(sinOffset + k / 5));\n                context.lineTo(k * frequencyDraw, height - middleHeight - value * middleHeight * Math.sin(sinOffset + k / 5) * averageVolume);\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2; i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                // context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - (value * middleHeight));\n                // context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.cos(sinOffset + k / 5));\n                context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - value * middleHeight * Math.cos(sinOffset + k / 5) * averageVolume);\n            }\n\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n            return;\n\n            // AMPLITUDE VARIABLE\n\n            var amplitudeLength = amplitudeArray.length;\n            var amplitudeOffset = ~ ~(amplitudeLength / amplitudeCount);\n            var amplitudeDraw = ~ ~(width / amplitudeCount);\n\n            context.lineWidth = ~ ~(2 + Math.random() * 4);\n\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n            k = 0;\n            for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n                k++;\n                value = height - height * amplitudeArray[i] / 256 - 1;\n                context.lineTo(k * amplitudeDraw, value);\n            }\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n            k = 0;\n            for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n                k++;\n                value = height - height * amplitudeArray[i] / 256 - 1;\n                context.lineTo(k * amplitudeDraw, value);\n            }\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n            //     k++;\n            //     context.lineTo(k * amplitudeDraw, Math.random() * 50 - 25 + middleHeight);\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n        }\n    };\n\n    var clearCanvas = function clearCanvas() {\n        context.clearRect(0, 0, width, height);\n    };\n\n    try {\n        audioContext = new AudioContext();\n    } catch (ex) {\n        console.warn('Web Audio API is not supported in this browser');\n    }\n\n    App.bind('episode-1', 'loaded', function () {\n        episodeIsPlaying = true;\n\n        setupAudioNodes();\n        video.currentTime = 0;\n        video.play();\n        ambientLight.play();\n\n        // setup the event handler that is triggered every time enough samples have been collected\n        // trigger the audio analysis and draw the results\n        javascriptNode.addEventListener('audioprocess', function (e) {\n            var now = new Date().getTime();\n            if (lastDraw > now - frequency) return;\n            lastDraw = now;\n            // get the Time Domain data for this sample\n            averageVolume = getAverageVolume(frequencyArray) / 100;\n            analyserNode.getByteTimeDomainData(amplitudeArray);\n            analyserNode.getByteFrequencyData(frequencyArray);\n\n            // draw the display if the audio is playing\n            if (audioPlaying === true) {\n                window.requestAnimationFrame(drawSound);\n            }\n        });\n\n        // Load the Audio the first time through, otherwise play it from the buffer\n        if (audioData === null) {\n            loadSound(audioUrl);\n        } else {\n            playSound(audioData);\n        }\n\n        energyInterval = setInterval(drawEnergy, 62);\n    });\n\n    App.bind('episode-1', 'unloading', function () {\n        clearInterval(energyInterval);\n        ambientLight.stop();\n        episodeIsPlaying = false;\n        sourceNode.stop(0);\n        audioPlaying = false;\n    });\n\n    App.bind('episode-1', 'unloaded', function () {\n        clearCanvas();\n        video.currentTime = 0;\n        video.pause();\n    });\n})();\n'use strict';\n\n(function () {\n\n    var episodeIsPlaying = false;\n\n    var canvas = $('.episode-2 .canvas');\n    var canvasEnergy = $('.episode-2 .drawing canvas');\n    var video = $('.episode-2 .video');\n    var ambientLight = new AmbientLight(video, $('.episode-2 .ambient'));\n\n    if (!canvas || !canvas.getContext) return;\n\n    canvas.width = 500;\n    canvas.height = 500;\n    canvasEnergy.width = window.innerWidth;\n    canvasEnergy.height = window.innerHeight;\n    var context = canvas.getContext('2d'),\n        energyCtx = canvasEnergy.getContext('2d'),\n        width = canvas.width,\n        height = canvas.height,\n        energyWidth = canvasEnergy.width,\n        energyHeight = canvasEnergy.height;\n\n    var frequency = 30,\n        amplitudeCount = 30,\n        frequencyCount = 40;\n\n    // Tutorial from: http://apprentice.craic.com/tutorials/30\n\n    var audioContext;\n    var audioBuffer;\n    var sourceNode;\n    var analyserNode;\n    var javascriptNode;\n    var audioData = null;\n    var audioPlaying = false;\n    var sampleSize = 1024;\n    var amplitudeArray;\n    var frequencyArray;\n    var audioUrl = 'media/episode2.mp3';\n    var middleWidth = ~ ~(energyWidth / 2);\n    var middleHeight = ~ ~(energyHeight / 2);\n    var lastDraw = 0;\n    var averageVolume = 0;\n    var particles = [];\n\n    var render = (function () {\n\n        var circles = [];\n        var initialized = false;\n        var height = 0;\n        var width = 0;\n        var init = function init(config) {\n            var count = config.count;\n            width = config.width;\n            height = config.height;\n            var circleMaxWidth = width * 0.106 >> 0;\n            var circlesEl = document.getElementById('circles');\n            for (var i = 0; i < count; i++) {\n                var node = document.createElement('div');\n                node.style.width = node.style.height = i / count * circleMaxWidth + 'px'; // increase the with and height of the circles\n                node.classList.add('circle'); // show circle\n                circles.push(node); // adds new circles\n                circlesEl.appendChild(node);\n            }\n            initialized = true;\n        };\n\n        var max = 256;\n\n        // make circles until he can't display another circle in the div\n        var renderFrame = function renderFrame(frequencyData) {\n\n            /* Var for change gradient and opacity */\n            var color_gradient = 0;\n            var increment_value = 16;\n            var opacity = 0;\n            var opacity_value = 0.05;\n\n            for (var i = 0; i < circles.length; i++) {\n                var circle = circles[i];\n                // Scale dynamicaly permit to change the height/width with the FrequancyData of the song\n                //and divided by max to control the radius\n                circle.style.cssText = '-webkit-transform:scale(' + frequencyData[i] / max + ')';\n                //setTimeout(function(){ atom.style.display = 'block'; }, 9900);\n\n                /* Condition who change dynamicaly the value of the rgba */\n                if (i < circles.length / 2) {\n                    color_gradient += increment_value;\n                    if (i < 1 / 1.5) {\n                        opacity += opacity_value;\n                    } else {\n                        opacity += opacity_value;\n                    }\n                } else {\n                    color_gradient -= increment_value;\n                }\n\n                // change the color of the circles\n                circle.style.backgroundColor = 'rgba(0,0,' + color_gradient + ',' + opacity_value + ')';\n            }\n        };\n        return {\n            init: init,\n            isInitialized: function isInitialized() {\n                return initialized;\n            },\n            renderFrame: renderFrame\n        };\n    })();\n\n    var setupAudioNodes = function setupAudioNodes() {\n        sourceNode = audioContext.createBufferSource();\n        analyserNode = audioContext.createAnalyser();\n        javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n\n        // Create the array for the data values\n        amplitudeArray = new Uint8Array(analyserNode.frequencyBinCount);\n        frequencyArray = new Uint8Array(analyserNode.frequencyBinCount);\n        // Now connect the nodes together\n        sourceNode.connect(audioContext.destination);\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        // analyserNode.fftSize = 64;\n        javascriptNode.connect(audioContext.destination);\n    };\n\n    // Load the audio from the URL via Ajax and store it in global variable audioData\n    // Note that the audio load is asynchronous\n    var loadSound = function loadSound(url) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        // When loaded, decode the data and play the sound\n        request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n                audioData = buffer;\n                playSound(audioData);\n            }, onError);\n        };\n        request.send();\n    };\n\n    // Play the audio and loop until stopped\n    var playSound = function playSound(buffer) {\n        sourceNode.buffer = buffer;\n        // sourceNode.start();    // Play the sound now\n        sourceNode.start(0);\n        sourceNode.loop = true;\n        audioPlaying = true;\n    };\n\n    var onError = function onError(e) {\n        console.warn(e);\n    };\n\n    var getAverageVolume = function getAverageVolume(array) {\n        var values = 0;\n        var average;\n\n        var length = array.length;\n\n        // get all the frequency amplitudes\n        for (var i = 0; i < length; i++) {\n            values += array[i];\n        }\n\n        average = values / length;\n        return average;\n    };\n\n    var create_particle = function create_particle() {\n        var particle = {};\n        // position where the particle come\n        particle.x = 250;\n        particle.y = 250;\n        particle.speed = {};\n        particle.speed.x = Math.random() * 10 - 5;\n        particle.speed.y = Math.random() * 10 - 5;\n\n        particle.style = 'white'; // color gradient\n        particle.radius = 1; // made round particle\n        return particle;\n    };\n\n    var draw = function draw() {\n        for (var i = 0; i < particles.length; i++) {\n            var particle = particles[i];\n\n            if (particle.x < 0 || particle.x > canvas.width || particle.y < 0 || particle.y > canvas.height) {\n                particle = particles[i] = create_particle();\n            }\n\n            particle.x += particle.speed.x;\n            particle.y += particle.speed.y;\n\n            context.beginPath();\n            context.fillStyle = particle.style;\n            context.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2); // send particle at 360 degree\n            context.fill();\n        }\n    };\n\n    var drawSound = function drawSound() {\n        if (episodeIsPlaying) {\n            clearCanvas();\n            draw();\n\n            render.renderFrame(frequencyArray);\n\n            var k,\n                i,\n                value = 0;\n            energyCtx.strokeStyle = 'white';\n            energyCtx.shadowBlur = 100;\n            energyCtx.shadowColor = 'rgb(20, 20, 220)';\n\n            // FREQUENCY VARIABLE\n\n            var frenquencyLength = frequencyArray.length - 300;\n            var frenquencyOffset = ~ ~(frenquencyLength / frequencyCount);\n            var frequencyDraw = ~ ~(middleWidth / frequencyCount);\n            var drawing = -1;\n\n            // DOUBLE FREQUENCY ARC - SYMMETRIC\n\n            energyCtx.lineWidth = ~ ~(3 + Math.random() * 6);\n            energyCtx.beginPath();\n\n            k = 0;\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                if (drawing > -1) {\n                    value = frequencyArray[i + 5] / 256;\n                    energyCtx.lineTo(k * frequencyDraw, energyHeight - middleHeight - value * middleHeight);\n                } else if (frequencyArray[i + 5] / 256 > 0.1) {\n                    drawing = i;\n                    energyCtx.moveTo(k * frequencyDraw, middleHeight);\n                }\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2 - (frenquencyLength - drawing); i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                energyCtx.lineTo(middleWidth + k * frequencyDraw, energyHeight - middleHeight - value * middleHeight);\n            }\n            energyCtx.lineTo(middleWidth + k * frequencyDraw + frenquencyOffset, middleHeight);\n            energyCtx.stroke();\n\n            energyCtx.lineWidth = ~ ~(3 + Math.random() * 6);\n            energyCtx.beginPath();\n            energyCtx.moveTo(0, middleHeight);\n\n            k = 0;\n            drawing = -1;\n\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                if (drawing > -1) {\n                    value = frequencyArray[i + 5] / 256;\n                    energyCtx.lineTo(k * frequencyDraw, energyHeight - middleHeight + value * middleHeight);\n                } else if (frequencyArray[i + 5] / 256 > 0.1) {\n                    drawing = i;\n                    energyCtx.moveTo(k * frequencyDraw, middleHeight);\n                }\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2 - (frenquencyLength - drawing); i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                energyCtx.lineTo(middleWidth + k * frequencyDraw, energyHeight - middleHeight + value * middleHeight);\n            }\n\n            energyCtx.lineTo(middleWidth + k * frequencyDraw + frenquencyOffset, middleHeight);\n            energyCtx.stroke();\n        }\n    };\n    // clear canvas\n    var clearCanvas = function clearCanvas() {\n        context.clearRect(0, 0, width, height);\n        energyCtx.clearRect(0, 0, energyWidth, energyHeight);\n    };\n\n    try {\n        audioContext = new AudioContext();\n    } catch (ex) {\n        console.warn('Web Audio API is not supported in this browser');\n    }\n    //Create new particle\n    for (var i = 0; i < 100; i++) {\n        particles.push(create_particle());\n    }\n\n    App.bind('episode-2', 'loaded', function () {\n        episodeIsPlaying = true;\n\n        setupAudioNodes();\n        video.currentTime = 0;\n        video.play();\n        ambientLight.play();\n\n        if (!render.isInitialized()) {\n            render.init({\n                // count: analyserNode.frequencyBinCount,\n                count: 10,\n                width: 360,\n                height: 360\n            });\n        }\n\n        // setup the event handler that is triggered every time enough samples have been collected\n        // trigger the audio analysis and draw the results\n        javascriptNode.addEventListener('audioprocess', function (e) {\n            var now = new Date().getTime();\n            if (lastDraw > now - frequency) return;\n            lastDraw = now;\n            // get the Time Domain data for this sample\n            // averageVolume = getAverageVolume(frequencyArray) / 100;\n            // analyserNode.getByteTimeDomainData(amplitudeArray);\n            analyserNode.getByteFrequencyData(frequencyArray);\n\n            // draw the display if the audio is playing\n            if (audioPlaying === true) {\n                window.requestAnimationFrame(drawSound);\n            }\n        });\n\n        // Load the Audio the first time through, otherwise play it from the buffer\n        if (audioData === null) {\n            loadSound(audioUrl);\n        } else {\n            playSound(audioData);\n        }\n    });\n\n    App.bind('episode-2', 'unloading', function () {\n        ambientLight.stop();\n        episodeIsPlaying = false;\n        sourceNode.stop(0);\n        audioPlaying = false;\n    });\n\n    App.bind('episode-2', 'unloaded', function () {\n        clearCanvas();\n        video.currentTime = 0;\n        video.pause();\n    });\n})();\n'use strict';\n\n(function () {\n\n    var GLOBAL_SPEED = 0.1,\n        HYPERSPACE_RUN = true;\n\n    App.bind('home', 'unloading', function () {\n        var interval = setInterval(function () {\n            GLOBAL_SPEED = (GLOBAL_SPEED + 0.1) * 1.3;\n            if (GLOBAL_SPEED > 70) {\n                clearInterval(interval);\n            }\n        }, 100);\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        // select.addEventListener('animationend', function begin(e) {\n        //     select.removeEventListener('animationend', begin);\n        // });\n\n        home.classList.add('exit-hyperspace');\n        select.classList.add('enter-hyperspace');\n    });\n\n    App.bind('home', 'unloaded', function () {\n        HYPERSPACE_RUN = false;\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        home.classList.remove('visible');\n        home.classList.remove('exit-hyperspace');\n        select.classList.remove('enter-hyperspace');\n    });\n\n    (function (canvas) {\n\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        if (canvas.getContext) {\n            var context = canvas.getContext('2d'),\n                width = canvas.width,\n                height = canvas.height,\n                starsCount = 100,\n                centerRadius = 100,\n                length = 10,\n                stars = [];\n\n            var createStar = function createStar() {\n                var randomX = Math.random(),\n                    randomY = Math.random(),\n                    color = ~ ~(Math.random() * 80 + 20);\n\n                return {\n                    x: randomX * width,\n                    y: randomY * height,\n                    xs: (randomX * width - width / 2) / 500,\n                    ys: (randomY * height - height / 2) / 500,\n                    size: ~ ~(color / 20),\n                    length: Math.random() * length,\n                    color: 'rgb(' + color + ', ' + color + ', ' + ~ ~(color + Math.random() * 20) + ')'\n                };\n            };\n\n            for (var i = 0; i < starsCount; i++) {\n                stars.push(createStar());\n            }\n\n            (function loop() {\n                if (HYPERSPACE_RUN) {\n\n                    window.requestAnimationFrame(loop);\n                    context.clearRect(0, 0, width, height);\n\n                    for (var i = 0; i < starsCount; i++) {\n                        var s = stars[i];\n                        if (s.x < 0 || s.y < 0 || s.x > width || s.y > height) {\n                            s = stars[i] = createStar();\n                        }\n                        context.strokeStyle = s.color;\n                        context.lineWidth = s.size;\n                        context.shadowBlur = 5;\n                        context.lineCap = 'round';\n                        context.shadowColor = \"#555\";\n                        context.beginPath();\n                        context.moveTo(s.x, s.y);\n                        context.lineTo(s.x + 0.1 + s.length * s.xs * GLOBAL_SPEED, s.y + s.length * s.ys * GLOBAL_SPEED);\n                        context.stroke();\n                        s.x += s.xs * GLOBAL_SPEED;\n                        s.y += s.ys * GLOBAL_SPEED;\n                    }\n                }\n            })();\n        }\n    })($('.hyperspace'));\n})();\n'use strict';\n\n(function () {\n\n    var preloadImages = function preloadImages(urls) {\n        for (var i = urls.length - 1; i >= 0; i--) {\n            var img = new Image();\n            img.src = urls[i];\n        }\n    };\n\n    App.init = function () {\n\n        preloadImages(['img/film-1.jpg', 'img/film-2.jpg', 'img/film-3.jpg', 'img/film-4.jpg', 'img/film-5.jpg', 'img/film-6.jpg', 'img/film-7.jpg', 'img/lock.svg', 'img/star-wars-logo.svg', 'img/starship-left.png', 'img/starship-right.png', 'img/vote-left.jpg', 'img/vote-right.jpg']);\n\n        window.addEventListener('load', function () {\n            var loader = $('section.loader');\n            if (loader) {\n                loader.addEventListener('transitionend', function () {\n                    loader.classList.remove('visible', 'fade-out');\n                });\n                loader.classList.add('fade-out');\n            }\n            if (window.location.hash && window.location.hash.length > 2) {\n                var hash = window.location.hash.substring(2),\n                    page = $('.page.' + hash);\n\n                if (page && page.classList.contains('page')) {\n                    page.classList.add('visible');\n                    App.call(hash, 'loading');\n                    App.call(hash, 'loaded');\n                    return;\n                }\n            }\n            $('.page.home').classList.add('visible');\n            App.call('home', 'loading');\n            App.call('home', 'loaded');\n        });\n    };\n})();\n'use strict';\n\n/**\n * Navigation between pages\n *\n */\n\n(function () {\n\n    // Bind begin button to hyperspace animation\n    $('.begin').addEventListener('click', function (e) {\n        App.call('home', 'unloading');\n        App.call('select', 'loading');\n        var select = $('.page.select');\n        select.addEventListener('animationend', function begin(e) {\n            select.removeEventListener('animationend', begin);\n            App.call('home', 'unloaded');\n            App.call('select', 'loaded');\n            $('.page.select').classList.add('visible');\n            App.setLocation('select');\n        });\n    });\n\n    // Bind navigation elements to animations\n    var bindNavigation = function bindNavigation(element) {\n        element.addEventListener('click', function (e) {\n            if (this.getAttribute('data-target')) {\n                App.goto(this.getAttribute('data-target'), this.getAttribute('data-direction') === 'up');\n            }\n            e.preventDefault();\n        });\n    };\n\n    var elements = $$('.navigation');\n    for (var i = elements.length - 1; i >= 0; i--) {\n        bindNavigation(elements[i]);\n    }\n\n    // Change page if hash change\n    window.addEventListener('hashchange', App.gotoHash);\n})();\n'use strict';\n\n/**\n * Episode selection\n *\n */\n\n(function () {\n\n    var select = {\n        lastMove: 0,\n        leftOffset: window.screen.width / 2 - 100,\n        rightOffset: 0,\n        screenScale: 100 - 100 / 1.75,\n        selectCards: $('.select .cards')\n    };\n\n    select.percentDivisor = window.screen.width - select.rightOffset - select.leftOffset;\n\n    var selectionListener = function selectionListener(event) {\n        var now = new Date().getTime();\n        if (select.lastMove < now - 20) {\n\n            select.lastMove = now;\n            var percent = (event.screenX - select.leftOffset) / select.percentDivisor;\n\n            if (percent < 0) {\n                percent = 0;\n            } else if (percent > 1) {\n                percent = 1;\n            }\n\n            select.selectCards.style.transform = 'translateZ(0) translateX(-' + percent * select.screenScale + '%)';\n        }\n    };\n\n    App.bind('select', 'loading', function () {\n        document.addEventListener('mousemove', selectionListener);\n    });\n\n    App.bind('select', 'unloading', function () {\n        document.removeEventListener('mousemove', selectionListener);\n    });\n})();\n'use strict';\n\n(function () {\n\n    var buttons = $$('.button-vote');\n    var bindVote = function bindVote(elt) {\n        elt.addEventListener('click', function (e) {\n            for (var i = buttons.length - 1; i >= 0; i--) {\n                buttons[i].innerHTML = 'VOTE';\n            }\n            elt.innerHTML = 'I Voted !';\n        });\n    };\n\n    for (var i = buttons.length - 1; i >= 0; i--) {\n        bindVote(buttons[i]);\n    }\n})();\n\"use strict\";\n\n// Load the page\nApp.init();","\nfunction AmbientLight(video, ambient) {\n    this.video = video;\n    this.ambient = ambient;\n    this.light1 = ambient.querySelector('.light-1');\n    this.light2 = ambient.querySelector('.light-2');\n    this.interval = -1;\n}\n\nAmbientLight.prototype.play = function() {\n    this.ambient.classList.add('active');\n    var self = this;\n\n    this.interval = setInterval(function () {\n\n        var applyTo = self.light1.classList.contains('active') ? self.light2 : self.light1;\n\n        // We show a 1x1 canvas in 100% width/height\n\n        if (!applyTo.children[0]) {\n            // If canvas doesn't exist, we create it\n            var canvas = document.createElement('canvas'),\n                context = canvas.getContext('2d');\n\n            canvas.width = 1;\n            canvas.height = 1;\n            canvas.classList.add('background');\n\n            applyTo.appendChild(canvas);\n        }\n\n        applyTo.children[0].getContext('2d').drawImage(self.video, 0, 0, 1, 1);\n\n        // As we can't do transition on gradient, we use 2 layers\n        // And we apply gradient to one, and do a transition on opacity\n        // Then next time we apply gradient to other one, etc...\n        self.light1.classList.toggle('active');\n        self.light2.classList.toggle('active');\n\n    }, 1000);\n};\n\nAmbientLight.prototype.stop = function() {\n    this.ambient.classList.remove('active');\n    clearInterval(this.interval);\n};\n","/**\n * Create App object\n *\n */\n\nvar App = {},\n    $ = document.querySelector.bind(document),\n    $$ = document.querySelectorAll.bind(document);\n\n(function () {\n\n    App.goto = function (identifier, gotoUp) {\n        var current = $('section.visible'),\n            next = $('.page.' + identifier),\n            direction = gotoUp ? 'up' : 'down';\n\n        if (!next || typeof gotoUp !== 'boolean') {\n            throw new Error('Wrong arguments: ' + next + ', ' + gotoUp);\n        } else if (current == next) {\n            throw new Error('Moving to the same page..');\n        } else {\n            if (current) {\n                var currentName = current.getAttribute('data-page');\n                App.call(currentName, 'unloading');\n                current.classList.remove('visible');\n                current.classList.add('exit-' + direction);\n                current.addEventListener('animationend', function animationend(e) {\n                    App.call(currentName, 'unloaded');\n                    current.removeEventListener('animationend', animationend);\n                    current.classList.remove('exit-' + direction);\n                });\n            }\n            App.call(identifier, 'loading');\n            next.classList.add('visible');\n            next.classList.add('enter-' + direction);\n            next.addEventListener('animationend', function animationend(e) {\n                App.call(identifier, 'loaded');\n                next.removeEventListener('animationend', animationend);\n                next.classList.remove('enter-' + direction);\n                if (identifier !== 'home') {\n                    App.setLocation(identifier);\n                }\n            });\n        }\n    };\n\n    App.home = function () {\n        // Rerun the page to restart the canvas\n        if (window.location.href) {\n             window.location.href = window.location.href.substring(0, window.location.href.indexOf('#') - 1);\n        } else {\n            window.location.reload();\n        }\n    };\n\n    var isChangingHash = false;\n\n    App.setLocation = function (hash) {\n        isChangingHash = true;\n        window.location.hash = '#/' + hash;\n        setTimeout(function () {\n            isChangingHash = false;\n        }, 1);\n    };\n\n    App.gotoHash = function (homeFallback) {\n        if (isChangingHash) return;\n        if (window.location.hash && window.location.hash.length > 2) {\n            var hash = window.location.hash.substring(2),\n                page = $('.page.' + hash);\n\n            if (hash === 'home') {\n                App.home();\n                return;\n            } else if (page && page.classList.contains('page')) {\n                var current = $('section.visible');\n                if (current) {\n                    current.classList.remove('visible');\n                    var currentName = current.getAttribute('data-page');\n                    App.call(currentName, 'unloading');\n                    App.call(currentName, 'unloaded');\n                }\n                page.classList.add('visible');\n                App.call(hash, 'loading');\n                App.call(hash, 'loaded');\n                window.HYPERSPACE = false;\n                return;\n            }\n        }\n        if (homeFallback) {\n            App.home();\n        }\n    };\n\n    var callbacks = {};\n    \n    App.call = function (page, state) {\n        if (callbacks[page] && callbacks[page][state]) {\n            for (var i = callbacks[page][state].length - 1; i >= 0; i--) {\n                callbacks[page][state][i]();\n            }\n        }\n    };\n\n    App.bind = function (page, state, callback) {\n        if (!callbacks[page]) {\n            callbacks[page] = {};\n        }\n        if (!callbacks[page][state]) {\n            callbacks[page][state] = [];\n        }\n        callbacks[page][state].push(callback);\n    };\n\n})();\n\n","\nwindow.AudioContext = (function() {\n    return  window.AudioContext || window.webkitAudioContext || window.mozAudioContext;\n})();\n","/* Compatible avec tous les navigateurs */\n(function() {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n        window.cancelAnimationFrame =\n          window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); },\n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n\n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n}());\n","\n(function () {\n\n    var episodeIsPlaying = false;\n\n    var canvas = $('.episode-1 .drawing canvas');\n    var video = $('.episode-1 .video');\n    var ambientLight = new AmbientLight(video, $('.episode-1 .ambient'));\n\n    if (!canvas || !canvas.getContext) return;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    var context = canvas.getContext('2d'),\n        width = canvas.width,\n        height = canvas.height;\n\n    var frequency = 30,\n        amplitudeCount = 30,\n        frequencyCount = 40;\n\n    // Tutorial from: http://apprentice.craic.com/tutorials/30\n\n    var audioContext;\n    var audioBuffer;\n    var sourceNode;\n    var analyserNode;\n    var javascriptNode;\n    var audioData = null;\n    var audioPlaying = false;\n    var sampleSize = 1024;\n    var amplitudeArray;\n    var frequencyArray;\n    var audioUrl = 'media/episode1.mp3';\n    var middleWidth = ~~(width / 2);\n    var middleHeight = ~~(height / 2);\n    var lastDraw = 0;\n    var energyInterval = -1;\n    var averageVolume = 0;\n    var sinOffset = Math.PI / 2;\n\n    var setupAudioNodes = function () {\n        sourceNode     = audioContext.createBufferSource();\n        analyserNode   = audioContext.createAnalyser();\n        javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n\n        // Create the array for the data values\n        amplitudeArray = new Uint8Array(analyserNode.frequencyBinCount);\n        frequencyArray = new Uint8Array(analyserNode.frequencyBinCount);\n        // Now connect the nodes together\n        sourceNode.connect(audioContext.destination);\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        javascriptNode.connect(audioContext.destination);\n    };\n\n    // Load the audio from the URL via Ajax and store it in global variable audioData\n    // Note that the audio load is asynchronous\n    var loadSound = function (url) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        // When loaded, decode the data and play the sound\n        request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n                audioData = buffer;\n                playSound(audioData);\n            }, onError);\n        };\n        request.send();\n    };\n\n    // Play the audio and loop until stopped\n    var playSound = function (buffer) {\n        sourceNode.buffer = buffer;\n        // sourceNode.start();    // Play the sound now\n        sourceNode.start(0);\n        sourceNode.loop = true;\n        audioPlaying = true;\n    };\n\n    var onError = function (e) {\n        console.warn(e);\n    };\n\n    var getAverageVolume = function (array) {\n        var values = 0;\n        var average;\n \n        var length = array.length;\n \n        // get all the frequency amplitudes\n        for (var i = 0; i < length; i++) {\n            values += array[i];\n        }\n \n        average = values / length;\n        return average;\n    };\n\n    context.strokeStyle = 'white';\n    context.shadowBlur = 100;\n    context.shadowColor = 'rgb(220, 20, 220)';\n\n    var drawEnergy = function () {\n        return;\n        // RANDOM ELECTRIC ARC\n\n        // clearCanvas();\n        context.lineWidth = 3;\n\n        var k, i, value = 0;\n        var amplitudeLength = amplitudeArray.length;\n        var amplitudeOffset = ~~(amplitudeLength / amplitudeCount);\n        var amplitudeDraw = ~~(width / amplitudeCount);\n        var size = 150;\n\n        context.beginPath();\n        context.moveTo(0, middleHeight);\n        k = 0;\n        for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n            k++;\n            context.lineTo(k * amplitudeDraw, (Math.random() * size - size/2) * averageVolume + middleHeight);\n        }\n        context.lineTo(width, middleHeight);\n        context.stroke();\n    };\n\n    var drawSound = function () {\n        if (episodeIsPlaying) {\n            clearCanvas();\n\n            var k, i, value = 0;\n\n            // FREQUENCY VARIABLE\n\n            var frenquencyLength = frequencyArray.length - 300;\n            var frenquencyOffset = ~~(frenquencyLength / frequencyCount);\n            var frequencyDraw = ~~(middleWidth / frequencyCount);\n\n            // DOUBLE FREQUENCY ARC - SYMMETRIC\n\n            context.lineWidth = ~~(3 + Math.random() * 6);\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n\n            k = 0;\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                // context.lineTo(k * frequencyDraw, height - middleHeight - (value * middleHeight));\n                // context.lineTo(k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.sin(sinOffset + k / 5));\n                context.lineTo(k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.sin(sinOffset + k / 5) * averageVolume);\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2; i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                // context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - (value * middleHeight));\n                // context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.cos(sinOffset + k / 5));\n                context.lineTo(middleWidth + k * frequencyDraw, height - middleHeight - (value * middleHeight) * Math.cos(sinOffset + k / 5) * averageVolume);\n            }\n\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n        return;\n\n            // AMPLITUDE VARIABLE\n\n            var amplitudeLength = amplitudeArray.length;\n            var amplitudeOffset = ~~(amplitudeLength / amplitudeCount);\n            var amplitudeDraw = ~~(width / amplitudeCount);\n\n            context.lineWidth = ~~(2 + Math.random() * 4);\n\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n            k = 0;\n            for (i = amplitudeOffset; i < amplitudeLength - amplitudeOffset; i += amplitudeOffset) {\n                k++;\n                value = height - (height * amplitudeArray[i] / 256) - 1;\n                context.lineTo(k * amplitudeDraw, value);\n\n            }\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n\n            context.beginPath();\n            context.moveTo(0, middleHeight);\n            k = 0;\n            for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n                k++;\n                value = height - (height * amplitudeArray[i] / 256) - 1;\n                context.lineTo(k * amplitudeDraw, value);\n            }\n            context.lineTo(width, middleHeight);\n            context.stroke();\n\n            // context.beginPath();\n            // context.moveTo(0, middleHeight);\n            // k = 0;\n            // for (i = amplitudeLength - amplitudeOffset; i >= amplitudeOffset; i -= amplitudeOffset) {\n            //     k++;\n            //     context.lineTo(k * amplitudeDraw, Math.random() * 50 - 25 + middleHeight);\n            // }\n            // context.lineTo(width, middleHeight);\n            // context.stroke();\n        }\n    };\n\n    var clearCanvas = function () {\n        context.clearRect(0, 0, width, height);\n    };\n\n    try {\n        audioContext = new AudioContext();\n    } catch (ex) {\n        console.warn('Web Audio API is not supported in this browser');\n    }\n\n\n    App.bind('episode-1', 'loaded', function () {\n        episodeIsPlaying = true;\n\n        setupAudioNodes();\n        video.currentTime = 0;\n        video.play();\n        ambientLight.play();\n\n        // setup the event handler that is triggered every time enough samples have been collected\n        // trigger the audio analysis and draw the results\n        javascriptNode.addEventListener('audioprocess', function (e) {\n            var now = new Date().getTime();\n            if (lastDraw > now - frequency) return;\n            lastDraw = now;\n            // get the Time Domain data for this sample\n            averageVolume = getAverageVolume(frequencyArray) / 100;\n            analyserNode.getByteTimeDomainData(amplitudeArray);\n            analyserNode.getByteFrequencyData(frequencyArray);\n\n            // draw the display if the audio is playing\n            if (audioPlaying === true) {\n                window.requestAnimationFrame(drawSound);\n            }\n        });\n\n        // Load the Audio the first time through, otherwise play it from the buffer\n        if (audioData === null) {\n            loadSound(audioUrl);\n        } else {\n            playSound(audioData);\n        }\n\n        energyInterval = setInterval(drawEnergy, 62);\n\n    });\n\n    App.bind('episode-1', 'unloading', function () {\n        clearInterval(energyInterval);\n        ambientLight.stop();\n        episodeIsPlaying = false;\n        sourceNode.stop(0);\n        audioPlaying = false;\n    });\n\n    App.bind('episode-1', 'unloaded', function () {\n        clearCanvas();\n        video.currentTime = 0;\n        video.pause();\n    });\n\n})();\n","\n(function () {\n\n    var episodeIsPlaying = false;\n\n    var canvas = $('.episode-2 .canvas');\n    var canvasEnergy = $('.episode-2 .drawing canvas');\n    var video = $('.episode-2 .video');\n    var ambientLight = new AmbientLight(video, $('.episode-2 .ambient'));\n\n    if (!canvas || !canvas.getContext) return;\n\n    canvas.width = 500;\n    canvas.height = 500;\n    canvasEnergy.width = window.innerWidth;\n    canvasEnergy.height = window.innerHeight;\n    var context = canvas.getContext('2d'),\n        energyCtx = canvasEnergy.getContext('2d'),\n        width = canvas.width,\n        height = canvas.height,\n        energyWidth = canvasEnergy.width,\n        energyHeight = canvasEnergy.height;\n\n    var frequency = 30,\n        amplitudeCount = 30,\n        frequencyCount = 40;\n\n    // Tutorial from: http://apprentice.craic.com/tutorials/30\n\n    var audioContext;\n    var audioBuffer;\n    var sourceNode;\n    var analyserNode;\n    var javascriptNode;\n    var audioData = null;\n    var audioPlaying = false;\n    var sampleSize = 1024;\n    var amplitudeArray;\n    var frequencyArray;\n    var audioUrl = 'media/episode2.mp3';\n    var middleWidth = ~~(energyWidth / 2);\n    var middleHeight = ~~(energyHeight / 2);\n    var lastDraw = 0;\n    var averageVolume = 0;\n    var particles = [];\n\n    var render = (function() {\n\n        var circles = [];\n        var initialized = false;\n        var height = 0;\n        var width = 0;\n        var init = function(config) {\n            var count = config.count;\n            width = config.width;\n            height = config.height;\n            var circleMaxWidth = (width * 0.106) >> 0;\n            var circlesEl = document.getElementById('circles');\n            for (var i = 0; i < count; i++) {\n                var node = document.createElement('div');\n                node.style.width = node.style.height = (i / count * circleMaxWidth) + 'px'; // increase the with and height of the circles\n                node.classList.add('circle'); // show circle\n                circles.push(node); // adds new circles\n                circlesEl.appendChild(node);\n               }\n            initialized = true;\n        };\n\n        var max = 256;\n\n        // make circles until he can't display another circle in the div\n        var renderFrame = function(frequencyData) {\n\n          /* Var for change gradient and opacity */\n          var color_gradient = 0;\n          var increment_value = 16;\n          var opacity = 0;\n          var opacity_value = 0.05;\n\n            for (var i = 0; i < circles.length; i++) {\n                var circle = circles[i];\n                // Scale dynamicaly permit to change the height/width with the FrequancyData of the song\n                //and divided by max to control the radius\n                circle.style.cssText = '-webkit-transform:scale(' + ((frequencyData[i] / max)) + ')';\n                //setTimeout(function(){ atom.style.display = 'block'; }, 9900);\n\n\n                /* Condition who change dynamicaly the value of the rgba */\n                  if(i < circles.length / 2 )\n                  {\n                    color_gradient += increment_value;\n                    if(i < 1/ 1.5) {\n                      opacity += opacity_value;\n                    } else {\n                        opacity += opacity_value;\n                    }\n                  }\n                  else\n                  {\n                    color_gradient -= increment_value;\n                  }\n\n                  // change the color of the circles\n                  circle.style.backgroundColor = 'rgba(0,0,'  + color_gradient + ',' + opacity_value + ')';\n           }\n        };\n        return {\n            init: init,\n            isInitialized: function() {\n                return initialized;\n            },\n            renderFrame: renderFrame\n        };\n\n    })();\n\n    var setupAudioNodes = function () {\n        sourceNode     = audioContext.createBufferSource();\n        analyserNode   = audioContext.createAnalyser();\n        javascriptNode = audioContext.createScriptProcessor(sampleSize, 1, 1);\n\n        // Create the array for the data values\n        amplitudeArray = new Uint8Array(analyserNode.frequencyBinCount);\n        frequencyArray = new Uint8Array(analyserNode.frequencyBinCount);\n        // Now connect the nodes together\n        sourceNode.connect(audioContext.destination);\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(javascriptNode);\n        // analyserNode.fftSize = 64;\n        javascriptNode.connect(audioContext.destination);\n    };\n\n    // Load the audio from the URL via Ajax and store it in global variable audioData\n    // Note that the audio load is asynchronous\n    var loadSound = function (url) {\n        var request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        // When loaded, decode the data and play the sound\n        request.onload = function () {\n            audioContext.decodeAudioData(request.response, function (buffer) {\n                audioData = buffer;\n                playSound(audioData);\n            }, onError);\n        };\n        request.send();\n    };\n\n    // Play the audio and loop until stopped\n    var playSound = function (buffer) {\n        sourceNode.buffer = buffer;\n        // sourceNode.start();    // Play the sound now\n        sourceNode.start(0);\n        sourceNode.loop = true;\n        audioPlaying = true;\n    };\n\n    var onError = function (e) {\n        console.warn(e);\n    };\n\n    var getAverageVolume = function (array) {\n        var values = 0;\n        var average;\n\n        var length = array.length;\n\n        // get all the frequency amplitudes\n        for (var i = 0; i < length; i++) {\n            values += array[i];\n        }\n\n        average = values / length;\n        return average;\n    };\n\n    var create_particle = function () {\n        var particle = {};\n        // position where the particle come\n        particle.x = 250;\n        particle.y = 250;\n        particle.speed = {};\n        particle.speed.x = Math.random() * 10 - 5;\n        particle.speed.y = Math.random() * 10 - 5;\n\n        particle.style = 'white'; // color gradient\n        particle.radius = 1; // made round particle\n        return particle;\n    };\n\n    var draw = function () {\n        for(var i = 0; i < particles.length; i++) {\n            var particle = particles [ i ];\n\n            if (particle.x < 0 || particle.x > canvas.width || particle.y < 0 || particle.y > canvas.height) {\n                particle = particles[i] = create_particle();\n            }\n\n            particle.x += particle.speed.x;\n            particle.y += particle.speed.y;\n\n            context.beginPath();\n            context.fillStyle = particle.style;\n            context.arc( particle.x, particle.y, particle.radius, 0, Math.PI * 2); // send particle at 360 degree\n            context.fill();\n        }\n    };\n\n    var drawSound = function () {\n        if (episodeIsPlaying) {\n            clearCanvas();\n            draw();\n\n            render.renderFrame(frequencyArray);\n\n            var k, i, value = 0;\n            energyCtx.strokeStyle = 'white';\n            energyCtx.shadowBlur = 100;\n            energyCtx.shadowColor = 'rgb(20, 20, 220)';\n\n            // FREQUENCY VARIABLE\n\n            var frenquencyLength = frequencyArray.length - 300;\n            var frenquencyOffset = ~~(frenquencyLength / frequencyCount);\n            var frequencyDraw = ~~(middleWidth / frequencyCount);\n            var drawing = -1;\n\n            // DOUBLE FREQUENCY ARC - SYMMETRIC\n\n            energyCtx.lineWidth = ~~(3 + Math.random() * 6);\n            energyCtx.beginPath();\n\n            k = 0;\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                if (drawing > -1) {\n                    value = frequencyArray[i + 5] / 256;\n                    energyCtx.lineTo(k * frequencyDraw, energyHeight - middleHeight - (value * middleHeight));\n                } else if (frequencyArray[i + 5] / 256 > 0.1) {\n                    drawing = i;\n                    energyCtx.moveTo(k * frequencyDraw, middleHeight);\n                }\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2 - (frenquencyLength - drawing); i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                energyCtx.lineTo(middleWidth + k * frequencyDraw, energyHeight - middleHeight - (value * middleHeight));\n            }\n            energyCtx.lineTo(middleWidth + k * frequencyDraw + frenquencyOffset, middleHeight);\n            energyCtx.stroke();\n\n            energyCtx.lineWidth = ~~(3 + Math.random() * 6);\n            energyCtx.beginPath();\n            energyCtx.moveTo(0, middleHeight);\n\n            k = 0;\n            drawing = -1;\n\n            for (i = frenquencyLength - frenquencyOffset; i >= 0; i -= frenquencyOffset) {\n                k++;\n                if (drawing > -1) {\n                    value = frequencyArray[i + 5] / 256;\n                    energyCtx.lineTo(k * frequencyDraw, energyHeight - middleHeight + (value * middleHeight));\n                } else if (frequencyArray[i + 5] / 256 > 0.1) {\n                    drawing = i;\n                    energyCtx.moveTo(k * frequencyDraw, middleHeight);\n                }\n            }\n\n            k = 0;\n            for (i = 0; i < frenquencyLength - frenquencyOffset * 2 - (frenquencyLength - drawing); i += frenquencyOffset) {\n                k++;\n                value = frequencyArray[i + 5] / 256;\n                energyCtx.lineTo(middleWidth + k * frequencyDraw, energyHeight - middleHeight + (value * middleHeight));\n            }\n\n            energyCtx.lineTo(middleWidth + k * frequencyDraw + frenquencyOffset, middleHeight);\n            energyCtx.stroke();\n\n        }\n    };\n    // clear canvas\n    var clearCanvas = function () {\n        context.clearRect(0, 0, width, height);\n        energyCtx.clearRect(0, 0, energyWidth, energyHeight);\n    };\n\n    try {\n        audioContext = new AudioContext();\n    } catch (ex) {\n        console.warn('Web Audio API is not supported in this browser');\n    }\n    //Create new particle\n    for (var i = 0; i < 100; i++) {\n        particles.push(create_particle());\n    }\n\n\n    App.bind('episode-2', 'loaded', function () {\n        episodeIsPlaying = true;\n\n        setupAudioNodes();\n        video.currentTime = 0;\n        video.play();\n        ambientLight.play();\n\n        if (!render.isInitialized()) {\n            render.init({\n                // count: analyserNode.frequencyBinCount,\n                count: 10,\n                width: 360,\n                height: 360\n            });\n        }\n\n        // setup the event handler that is triggered every time enough samples have been collected\n        // trigger the audio analysis and draw the results\n        javascriptNode.addEventListener('audioprocess', function (e) {\n            var now = new Date().getTime();\n            if (lastDraw > now - frequency) return;\n            lastDraw = now;\n            // get the Time Domain data for this sample\n            // averageVolume = getAverageVolume(frequencyArray) / 100;\n            // analyserNode.getByteTimeDomainData(amplitudeArray);\n            analyserNode.getByteFrequencyData(frequencyArray);\n\n            // draw the display if the audio is playing\n            if (audioPlaying === true) {\n                window.requestAnimationFrame(drawSound);\n            }\n        });\n\n        // Load the Audio the first time through, otherwise play it from the buffer\n        if (audioData === null) {\n            loadSound(audioUrl);\n        } else {\n            playSound(audioData);\n        }\n\n    });\n\n    App.bind('episode-2', 'unloading', function () {\n        ambientLight.stop();\n        episodeIsPlaying = false;\n        sourceNode.stop(0);\n        audioPlaying = false;\n    });\n\n    App.bind('episode-2', 'unloaded', function () {\n        clearCanvas();\n        video.currentTime = 0;\n        video.pause();\n    });\n\n})();\n","\n(function () {\n\n    var GLOBAL_SPEED = 0.1,\n        HYPERSPACE_RUN = true;\n\n    App.bind('home', 'unloading', function () {\n        var interval = setInterval(function () {\n            GLOBAL_SPEED = (GLOBAL_SPEED + 0.1) * 1.3;\n            if (GLOBAL_SPEED > 70) {\n                clearInterval(interval);\n            }\n        }, 100);\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        // select.addEventListener('animationend', function begin(e) { \n        //     select.removeEventListener('animationend', begin);\n        // });\n\n        home.classList.add('exit-hyperspace');\n        select.classList.add('enter-hyperspace');\n    });\n\n    App.bind('home', 'unloaded', function () {\n        HYPERSPACE_RUN = false;\n\n        var home = $('.page.home'),\n            select = $('.page.select');\n\n        home.classList.remove('visible');\n        home.classList.remove('exit-hyperspace');\n        select.classList.remove('enter-hyperspace');\n    });\n\n    (function (canvas) {\n\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        if (canvas.getContext) {\n            var context = canvas.getContext('2d'),\n                width = canvas.width,\n                height = canvas.height,\n                starsCount = 100,\n                centerRadius = 100,\n                length = 10,\n                stars = [];\n\n            var createStar = function () {\n                var randomX = Math.random(),\n                    randomY = Math.random(),\n                    color = ~~(Math.random() * 80 + 20);\n\n                return {\n                    x: randomX * width,\n                    y: randomY * height,\n                    xs: (randomX * width - width/2) / 500,\n                    ys: (randomY * height - height/2) / 500,\n                    size: ~~(color / 20),\n                    length: Math.random() * length,\n                    color: 'rgb(' + color + ', ' + color + ', ' + ~~(color + Math.random() * 20) + ')'\n                };\n            };\n\n            for (var i = 0; i < starsCount; i++) {\n                stars.push(createStar());\n            }\n\n            (function loop() {\n                if (HYPERSPACE_RUN) {\n\n                    window.requestAnimationFrame(loop);\n                    context.clearRect(0, 0, width, height);\n\n                    for (var i = 0; i < starsCount; i++) {\n                        var s = stars[i];\n                        if (s.x < 0 || s.y < 0 || s.x > width || s.y > height) {\n                            s = stars[i] = createStar();\n                        }\n                        context.strokeStyle = s.color;\n                        context.lineWidth = s.size;\n                        context.shadowBlur = 5;\n                        context.lineCap = 'round';\n                        context.shadowColor = \"#555\";\n                        context.beginPath();\n                        context.moveTo(s.x, s.y);\n                        context.lineTo(s.x + 0.1 + s.length * s.xs * GLOBAL_SPEED, s.y + s.length * s.ys * GLOBAL_SPEED);\n                        context.stroke();\n                        s.x += s.xs * GLOBAL_SPEED;\n                        s.y += s.ys * GLOBAL_SPEED;\n                    }\n                }\n            })();\n        }\n\n    })($('.hyperspace'));\n\n})();","\n(function () {\n\n    var preloadImages = function (urls) {\n        for (var i = urls.length - 1; i >= 0; i--) {\n            var img = new Image();\n            img.src = urls[i];\n        }\n    };\n\n    App.init = function () {\n\n        preloadImages([\n            'img/film-1.jpg',\n            'img/film-2.jpg',\n            'img/film-3.jpg',\n            'img/film-4.jpg',\n            'img/film-5.jpg',\n            'img/film-6.jpg',\n            'img/film-7.jpg',\n            'img/lock.svg',\n            'img/star-wars-logo.svg',\n            'img/starship-left.png',\n            'img/starship-right.png',\n            'img/vote-left.jpg',\n            'img/vote-right.jpg',\n        ]);\n\n        window.addEventListener('load', function () {\n            var loader = $('section.loader');\n            if (loader) {\n                loader.addEventListener('transitionend', function () {\n                    loader.classList.remove('visible', 'fade-out');\n                });\n                loader.classList.add('fade-out');\n            }\n            if (window.location.hash && window.location.hash.length > 2) {\n                var hash = window.location.hash.substring(2),\n                    page = $('.page.' + hash);\n\n                if (page && page.classList.contains('page')) {\n                    page.classList.add('visible');\n                    App.call(hash, 'loading');\n                    App.call(hash, 'loaded');\n                    return;\n                }\n            }\n            $('.page.home').classList.add('visible');\n            App.call('home', 'loading');\n            App.call('home', 'loaded');\n        });\n\n    };\n\n})();\n","/**\n * Navigation between pages\n *\n */\n\n(function () {\n\n    // Bind begin button to hyperspace animation\n    $('.begin').addEventListener('click', function (e) {\n        App.call('home', 'unloading');\n        App.call('select', 'loading');\n        var select = $('.page.select');\n        select.addEventListener('animationend', function begin(e) { \n            select.removeEventListener('animationend', begin);\n            App.call('home', 'unloaded');\n            App.call('select', 'loaded');\n            $('.page.select').classList.add('visible');\n            App.setLocation('select');\n        });\n    });\n\n    // Bind navigation elements to animations\n    var bindNavigation = function (element) {\n        element.addEventListener('click', function (e) {\n            if (this.getAttribute('data-target')) {\n                App.goto(this.getAttribute('data-target'), this.getAttribute('data-direction') === 'up');\n            }\n            e.preventDefault();\n        });\n    };\n\n    var elements = $$('.navigation');\n    for (var i = elements.length - 1; i >= 0; i--) {\n        bindNavigation(elements[i]);\n    }\n\n    // Change page if hash change\n    window.addEventListener('hashchange', App.gotoHash);\n\n})();\n","/**\n * Episode selection\n *\n */\n\n(function () {\n\n    var select = {\n        lastMove: 0,\n        leftOffset: window.screen.width / 2 - 100,\n        rightOffset: 0,\n        screenScale: (100 - 100 / 1.75),\n        selectCards: $('.select .cards')\n    };\n\n    select.percentDivisor = window.screen.width - select.rightOffset - select.leftOffset;\n\n    var selectionListener = function(event) {\n        var now = new Date().getTime();\n        if (select.lastMove < now - 20) {\n\n            select.lastMove = now;\n            var percent = (event.screenX - select.leftOffset) / select.percentDivisor;\n            \n            if (percent < 0) {\n                percent = 0;\n            } else if (percent > 1) {\n                percent = 1;\n            }\n\n            select.selectCards.style.transform = 'translateZ(0) translateX(-' + percent * select.screenScale + '%)';\n        }\n    };\n\n    App.bind('select', 'loading', function () {\n        document.addEventListener('mousemove', selectionListener);\n    });\n\n    App.bind('select', 'unloading', function () {\n        document.removeEventListener('mousemove', selectionListener);\n    });\n\n})();\n","\n(function () {\n\n    var buttons = $$('.button-vote');\n    var bindVote = function (elt) {\n        elt.addEventListener('click', function (e) {\n            for (var i = buttons.length - 1; i >= 0; i--) {\n                buttons[i].innerHTML = 'VOTE';\n            }\n            elt.innerHTML = 'I Voted !';\n        });\n    };\n\n    for (var i = buttons.length - 1; i >= 0; i--) {\n        bindVote(buttons[i]);\n    }\n\n})();\n","\n// Load the page\nApp.init();\n"],"sourceRoot":"/source/"}